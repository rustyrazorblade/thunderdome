use steps::*;

#[export]
query -> ParsedGraphQuery
    = "g." scope:query_scope steps:steps {ParsedGraphQuery{scope:scope, steps:steps}  }

query_scope -> Scope
    = global_scope / vertex_scope


global_scope -> Scope
    = "V" { Scope::Global }

vertex_scope -> Scope
    = "v(" ids:list_of_ids ")" { Scope::Vertex(ids) }

list_of_ids -> Vec<i64>
    = vertex_id ++ "," { let mut r = Vec::new(); r.push(1); r }

vertex_id -> i64
    = whitespace* x:[1-9]+ whitespace* { match_str.trim().parse().unwrap() }

whitespace
  = [ \t\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}]

steps -> Vec<Step>
    = funcs:func_call*  { funcs }

func_call -> Step
    = "." name:func_name "(" args:func_args ")" { Step::new(name) }

func_name -> String
    = [a-zA-Z]+ { match_str.to_string() }

func_args -> Vec<Arg>
    = func_arg ** ","

func_arg -> Arg
    = number

number -> Arg
    = float / integer / string

integer -> Arg
    = whitespace* "-"? [1-9][0-9]* whitespace*
    { Arg::Integer(match_str.trim().parse().unwrap()) }

float -> Arg
    = whitespace* "-"? [0-9]* "." [0-9]+
    { Arg::Float(match_str.trim().parse().unwrap()) }

string -> Arg
    = double_quoted_string / single_quoted_string

single_quoted_string -> Arg
    = "'" string_guts "'"
    { Arg::String(match_str.trim().to_string()) }

double_quoted_string -> Arg
    = '"' string_guts '"'
    { Arg::String(match_str.trim().to_string()) }

string_guts = [a-zA-Z0-9]*
