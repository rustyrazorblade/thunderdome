use steps::*;

#[export]
query -> GraphQuery
    = "g." scope:query_scope steps:steps {GraphQuery{scope:scope, steps:steps}  }

query_scope -> Scope
    = global_scope / vertex_scope


global_scope -> Scope
    = "V" { Scope::Global }

vertex_scope -> Scope
    = "v(" ids:list_of_ids ")" { Scope::Vertex(ids) }

list_of_ids -> Vec<i64>
    = integer ++ "," { let mut r = Vec::new(); r.push(1); r }

integer -> i64
    = whitespace* x:[1-9]+ whitespace* { match_str.trim().parse().unwrap() }

whitespace
  = [ \t\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}]

steps -> Vec<Step>
    = funcs:func_call*  { funcs }

func_call -> Step
    = "." name:func_name "(" ")" { Step::new(name) }

func_name -> String
    = [a-zA-Z]+ { match_str.to_string() }
