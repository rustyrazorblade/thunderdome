use steps::*;

#[export]
query -> ParsedGraphQuery
    = "g" steps:steps
    { ParsedGraphQuery{steps:steps} }

list_of_ids -> Vec<i64>
    = vertex_id ++ "," { let mut r = Vec::new(); r.push(1); r }

vertex_id -> i64
    = whitespace* x:[1-9]+ whitespace* { match_str.trim().parse().unwrap() }

whitespace
  = [ \t\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}]

steps -> Vec<RawStep>
    = funcs:func_call*  { funcs }

func_call -> RawStep
    = "." name:func_name "(" args:func_args ")" { RawStep::new(name, args) }

func_name -> String
    = [a-zA-Z]+ { match_str.to_string() }

func_args -> Vec<Arg>
    = func_arg ** ","

func_arg -> Arg
    = number

number -> Arg
    = float / integer / string

integer -> Arg
    = whitespace* "-"? [1-9][0-9]* whitespace*
    { Arg::Integer(match_str.trim().parse().unwrap()) }

float -> Arg
    = whitespace* "-"? [0-9]* "." [0-9]+
    { Arg::Float(match_str.trim().parse().unwrap()) }

string -> Arg
    = double_quoted_string / single_quoted_string

single_quoted_string -> Arg
    = "'" guts:string_guts "'"
    { Arg::String(guts) }

double_quoted_string -> Arg
    = '"' guts:string_guts '"'
    { Arg::String(guts) }

string_guts -> String
    = [a-zA-Z0-9\-]* { match_str.to_string() }
